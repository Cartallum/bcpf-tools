name: CI

on: [pull_request, push, workflow_dispatch]

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Shell Check
      run: ./shellcheck.sh
      shell: bash

  build:
    name: Build
    needs: check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-20.04
          ninja_file: ninja-linux.zip
          ninja_sha: b901ba96e486dce377f9a070ed4ef3f79deb45f4ffe2938f8e7ddc69cfb3df77
          ninja_dir: /usr/local/bin
          ninja_sudo: sudo
          rust: stable
          tar: linux
          out_dir: out
        - target: x86_64-apple-darwin
          os: macos-latest
          ninja_file: ninja-mac.zip
          ninja_sha: 482ecb23c59ae3d4f158029112de172dd96bb0e97549c4b1ca32d8fad11f873e
          ninja_dir: /usr/local/bin
          ninja_sudo: sudo
          rust: stable
          tar: osx
          out_dir: out
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          ninja_file: ninja-win.zip
          ninja_sha: 524b344a1a9a55005eaf868d991e090ab8ce07fa109f1820d40e74642e289abc
          ninja_dir: /usr/bin
          ninja_sudo:
          rust: stable
          tar: windows
          out_dir: /c/out
    steps:
    - uses: actions/checkout@v1
    - name: Install coreutils
      run: |
        brew update && brew install coreutils
      if: matrix.os == 'macos-latest'
      shell: bash
    - name: Install Ninja
      run: |
        curl -L -O "https://github.com/ninja-build/ninja/releases/download/v1.11.1/${{ matrix.ninja_file }}" && \
        echo "${{ matrix.ninja_sha }} ${{ matrix.ninja_file }}" | sha256sum -c && \
        ${{ matrix.ninja_sudo }} unzip ${{ matrix.ninja_file }} -d ${{ matrix.ninja_dir }} && rm ${{ matrix.ninja_file }}
      shell: bash
    - name: Install Rust
      run: |
        rustup update ${{ matrix.rust }} --no-self-update && rustup default ${{ matrix.rust }}
        rustup target add ${{ matrix.target }}
      shell: bash
    - name: Build
      run: ./build.sh ${{ matrix.out_dir }}
      shell: bash
    - name: Upload ${{ matrix.tar }} BPF tarball
      uses: actions/upload-artifact@v2
      with:
        name: cbe-bpf-tools-${{ matrix.tar }}.tar.bz2
        path: cbe-bpf-tools-${{ matrix.tar }}.tar.bz2
    - name: Upload ${{ matrix.tar }} SBF tarball
      uses: actions/upload-artifact@v2
      with:
        name: cbe-sbf-tools-${{ matrix.tar }}.tar.bz2
        path: cbe-sbf-tools-${{ matrix.tar }}.tar.bz2

  release:
    name: Upload Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
    - name: Download Linux BPF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-bpf-tools-linux.tar.bz2
    - name: Download macOS BPF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-bpf-tools-osx.tar.bz2
    - name: Download Linux SBF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-sbf-tools-linux.tar.bz2
    - name: Download macOS SBF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-sbf-tools-osx.tar.bz2
    - name: Download Windows BPF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-bpf-tools-windows.tar.bz2
    - name: Download Windows SBF tarball
      uses: actions/download-artifact@v2
      with:
        name: cbe-sbf-tools-windows.tar.bz2
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Release Linux BPF tarball
      id: upload-release-linux-bpf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-bpf-tools-linux.tar.bz2
        asset_name: cbe-bpf-tools-linux.tar.bz2
        asset_content_type: application/zip
    - name: Release macOS BPF tarball
      id: upload-release-macos-bpf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-bpf-tools-osx.tar.bz2
        asset_name: cbe-bpf-tools-osx.tar.bz2
        asset_content_type: application/zip
    - name: Release Linux SBF tarball
      id: upload-release-linux-sbf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-sbf-tools-linux.tar.bz2
        asset_name: cbe-sbf-tools-linux.tar.bz2
        asset_content_type: application/zip
    - name: Release macOS SBF tarball
      id: upload-release-macos-sbf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-sbf-tools-osx.tar.bz2
        asset_name: cbe-sbf-tools-osx.tar.bz2
        asset_content_type: application/zip
    - name: Release Windows BPF tarball
      id: upload-release-windows-bpf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-bpf-tools-windows.tar.bz2
        asset_name: cbe-bpf-tools-windows.tar.bz2
        asset_content_type: application/zip
    - name: Release Windows SBF tarball
      id: upload-release-windows-sbf
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: cbe-sbf-tools-windows.tar.bz2
        asset_name: cbe-sbf-tools-windows.tar.bz2
        asset_content_type: application/zip
